# load("@rules_foreign_cc//foreign_cc:configure.bzl", "configure_make")
# load("@rules_foreign_cc//foreign_cc:make.bzl", "make")
# load(":build_icu.bzl", "build_icu")

licenses(["notice"])  # Apache v2.0

package(
    default_visibility = ["//visibility:public"],
)

icu_major_version = 73

icu_minor_version = 2

# We need to label this for configure_make.
filegroup(
    name = "all",
    srcs = glob(["**/*"]),
)

cc_library(
    name = "common",
    srcs = glob(
        [
            "common/*.cpp",
            "common/*.h",
        ],
    ),
    hdrs = glob(["common/unicode/**"]),
    copts = ["-Wno-deprecated-declarations"],
    includes = ["common"],
    local_defines = ["U_COMMON_IMPLEMENTATION"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "i18n",
    srcs = glob([
        "i18n/*.cpp",
        "i18n/*.h",
    ]),
    hdrs = glob(["i18n/unicode/**"]),
    copts = ["-Wno-deprecated-declarations"],
    includes = ["i18n"],
    local_defines = ["U_I18N_IMPLEMENTATION"],
    visibility = ["//visibility:public"],
    deps = [":common"],
)

cc_library(
    name = "io",
    srcs = glob([
        "io/*.cpp",
        "io/*.h",
    ]),
    hdrs = glob(["io/unicode/**"]),
    includes = ["io"],
    local_defines = ["U_IO_IMPLEMENTATION"],
    visibility = ["//visibility:public"],
    deps = [":i18n"],
)

cc_library(
    name = "stubdata",
    srcs = glob([
        "stubdata/*.cpp",
        "stubdata/*.h",
    ]),
    deps = [":common"],
)

cc_library(
    name = "toolutil",
    srcs = glob(["tools/toolutil/*.cpp"]),
    hdrs = glob(["tools/toolutil/*.h"]),
    includes = ["tools/toolutil"],
    local_defines = ["U_TOOLUTIL_IMPLEMENTATION", "U_ELF"],
    deps = [":i18n"],
)

cc_binary(
    name = "icupkg",
    srcs = [
        "tools/icupkg/icupkg.cpp",
    ],
    deps = [
        # ':icu-tools',
        ":stubdata",
        ":toolutil",
    ],
    # copts = icu_copts,
    # linkopts = icu_linkopts,
)

cc_binary(
    name = "pkgdata",
    srcs = [
        "tools/pkgdata/pkgdata.cpp",
        "tools/pkgdata/pkgtypes.c",
        "tools/pkgdata/pkgtypes.h",
    ],
    deps = [
        # ":icu-tools",
        ":stubdata",
        ":toolutil",
    ],
    # copts = icu_copts,
    # linkopts = icu_linkopts,
)

cc_library(
    name = "icu-data",
    srcs = [
        "libicudata.a",
        "libicudata.so",
    ],
)

genrule(
    name = "icupkg_inc",
    srcs = glob([
        "runConfigureICU",
        # The files below are used by runConfigureICU.
        "configure",
        "common/unicode/*.h",
        "config/*",
        "config.sub",
        "config.guess",
        "install-sh",
        "icudefs.mk.in",
        "**/Makefile.in",
        "**/pkgdataMakefile.in",
        "python/**",
        "**/*.py",
        # "**",
    ]),
    outs = [
        "icupkg.inc",
    ],
    cmd = " && ".join([
        # Detect the ARCH used to configure the icu library.
        'if [ `uname` == "Linux" ]; then ARCH=Linux; elif [ `uname` == "Darwin" ]; then ARCH=MacOSX; fi',
        'CFLAGS="-DU_USING_ICU_NAMESPACE=0 -DU_CHARSET_IS_UTF8=1 -DUNISTR_FROM_CHAR_EXPLICIT=explicit -DUNISTR_FROM_STRING_EXPLICIT=explicit -DU_NO_DEFAULT_INCLUDE_UTF_HEADERS=1" $(location runConfigureICU) $$ARCH --with-library-bits=64 >/dev/null',
        "cd data",
        "make -f pkgdataMakefile",
        "cd ..",
        "cp data/icupkg.inc $(location icupkg.inc)",
    ]),
)

genrule(
    name = "libicudata",
    srcs = [
        "data/in/icudt%dl.dat" % icu_major_version,
        "icupkg.inc",
    ],
    outs = [
        "libicudata.a",
        "libicudata.so",
    ],
    cmd = " && ".join([
        # The 'out' dircectory is a temporary directory.
        "mkdir -p out",
        "mkdir -p out/build",
        "mkdir -p out/build/icudt%dl" % icu_major_version,
        "mkdir -p out/build/icudt%dl/curr" % icu_major_version,
        "mkdir -p out/build/icudt%dl/lang" % icu_major_version,
        "mkdir -p out/build/icudt%dl/region" % icu_major_version,
        "mkdir -p out/build/icudt%dl/zone" % icu_major_version,
        "mkdir -p out/build/icudt%dl/unit" % icu_major_version,
        "mkdir -p out/build/icudt%dl/brkitr" % icu_major_version,
        "mkdir -p out/build/icudt%dl/coll" % icu_major_version,
        "mkdir -p out/build/icudt%dl/rbnf" % icu_major_version,
        "mkdir -p out/build/icudt%dl/translit" % icu_major_version,
        "mkdir -p out/tmp",
        "mkdir -p out/tmp/curr",
        "mkdir -p out/tmp/lang",
        "mkdir -p out/tmp/region",
        "mkdir -p out/tmp/zone",
        "mkdir -p out/tmp/unit",
        "mkdir -p out/tmp/coll",
        "mkdir -p out/tmp/rbnf",
        "mkdir -p out/tmp/translit",
        "mkdir -p out/tmp/brkitr",
        # Invoke icupkg to unpack the icu data.
        "$(location :icupkg) -d out/build/icudt{0}l --list -x \\* $(location data/in/icudt{0}l.dat) -o out/tmp/icudata.lst".format(icu_major_version),
        # Invoke pkgdata to package the unpacked icu data into c++ libraries
        # that can be linked against.
        "$(location :pkgdata) -O $(location icupkg.inc) -q -c -s out/build/icudt{0}l -d out -e icudt{0}  -T out/tmp -p icudt{0}l -m static -r {0}.{1} -L icudata out/tmp/icudata.lst &> /dev/null".format(icu_major_version, icu_minor_version),
        "cp out/libicudata.a $(location libicudata.a)",
        "$(location :pkgdata) -O $(location icupkg.inc) -q -c -s out/build/icudt{0}l -d out -e icudt{0}  -T out/tmp -p icudt{0}l -m dll -r {0}.{1} -L icudata out/tmp/icudata.lst &> /dev/null".format(icu_major_version, icu_minor_version),
        # In MacOSX use .dylib; In Linux use .so.
        # TODO (zhongming): This is a super hacky hack!
        'if [ `uname` == "Linux" ]; then DYLIB=so; elif [ `uname` == "Darwin" ]; then DYLIB=dylib; fi',
        "cp -H out/libicudata.$$DYLIB $(location libicudata.so)",
        "rm -rf out",
    ]),
    tools = [
        ":icupkg",
        ":pkgdata",
    ] + select({
        "@platforms//cpu:wasm32": [
            "@emsdk//emscripten_toolchain:ar_files",
            "@emsdk//emscripten_toolchain:compiler_files",
            "@emsdk//emscripten_toolchain:linker_files",
        ],
        "//conditions:default": [],
    }),
)

cc_library(
    name = "icu",
    deps = [
        "//:io",
        "//:icu-data",
    ],
)
