# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true
env:
  EM_VERSION: 3.1.33
  EM_CACHE_FOLDER: 'emsdk-cache'
jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Install
        run: sudo apt-get install doxygen graphviz
      - name: Checkout
        uses: actions/checkout@v3
      - name: Clone Deps
        run: git submodule update --init
        working-directory: ${{github.workspace}}
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v3
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: emsdk-${{env.EM_VERSION}}-${{ runner.os }}

      - name: Setup emsdk
        uses: PikachuHy/setup-emsdk@master
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Verify emsdk
        run: emcc -v
      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_CROSSCOMPILING_EMULATOR="$EMSDK_NODE;--experimental-wasm-bulk-memory;--experimental-wasm-threads"
      - name: Build
        run: cmake --build ${{github.workspace}}/build -j --verbose
      - name: Test
        working-directory: ${{github.workspace}}/build/test
        run: ctest -C ${{matrix.mode}} --output-on-failure
      - name: Yarn Install
        run: yarn install
        working-directory: ${{github.workspace}}
      - name: Build Website
        run: yarn docs:build
        working-directory: ${{github.workspace}}
      - name: Copy wasm files
        run: |
          cp build/wasm/pscm.js docs/public
          cp build/wasm/pscm.wasm docs/public
          cp wasm/demo.html docs/public
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: 'docs/public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
