load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("version.bzl", "gen_pscm_version_info")
load("test.bzl", "collect_pscm_tests")

py_binary(
    name = "gen_cpp",
    srcs = ["gen_cpp.py"],
)

gen_pscm_version_info(
    name = "pscm-version-info",
    branch_variable_name = "GIT_BRANCH",
    commit_variable_name = "GIT_COMMIT_HASH",
    dirty_variable_name = "GIT_DIRTY",
    source_file = "src/version.cpp",
    version_major = "0",
    version_minor = "3",
    version_patch = "0",
)

cc_library(
    name = "pscm",
    srcs = glob(
        [
            "src/**/*.cpp",
        ],
    ) + [
        ":src/version.cpp",
    ],
    hdrs = glob(
        ["include/pscm/**/*.h"],
    ),
    copts = select({
        # disable error: result of comparison of constant -1 with expression of type 'char' is always false
        "@platforms//cpu:wasm32": ["-Wno-tautological-constant-out-of-range-compare"],
        "//conditions:default": [],
    }) + [
        "-Wno-sign-compare",
        "-std=c++20",
        "-Wno-unused-value",
    ],
    defines = select({
        "@platforms//cpu:wasm32": ["WASM_PLATFORM"],
        "//conditions:default": [],
    }),
    features = select({
        # only wasm need add exceptions explict
        "@platforms//cpu:wasm32": [
            "exceptions",
        ],
        "//conditions:default": [],
    }),
    includes = [
        "include",
    ],
    linkopts = select({
        "@platforms//cpu:wasm32": [
            "-sEXPORTED_RUNTIME_METHODS=ccall,cwrap",
            "-sSTACK_SIZE=6553600",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "@spdlog",
        "@cpp-linenoise",
        "@ust",
        "@icu",
        # "@icu//:io",
        # "@icu//:stubdata",
        "@mscharconv",
        # compat c++14
        # "@filesystem",
        # "@optional",
        # "@string-view-lite",
        # "@variant",
    ],
)

cc_binary(
    name = "pscm-main",
    srcs = ["main.cpp"],
    copts = ["-std=c++20"],
    deps = [":pscm"],
)

collect_pscm_tests()
