load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("version.bzl", "gen_pscm_version_info")
load("test.bzl", "collect_pscm_tests")
load("@llvm-project//mlir:tblgen.bzl", "gentbl_cc_library", "td_library")
load("@pybind11_bazel//:build_defs.bzl", "pybind_extension", "pybind_library")

config_setting(
    name = "mlir_codegen",
    values = {"define": "codegen=mlir"},
)

py_binary(
    name = "gen_cpp",
    srcs = ["gen_cpp.py"],
)

gen_pscm_version_info(
    name = "pscm-version-info",
    branch_variable_name = "GIT_BRANCH",
    commit_variable_name = "GIT_COMMIT_HASH",
    dirty_variable_name = "GIT_DIRTY",
    source_file = "src/version.cpp",
    version_major = "0",
    version_minor = "3",
    version_patch = "0",
)

cc_library(
    name = "pscm",
    srcs = glob(
        [
            "src/**/*.cpp",
        ],
        exclude = ["src/codegen/**"],
    ) + select({
        ":mlir_codegen": glob(["src/codegen/**/*.cpp"]),
        "//conditions:default": [],
    }) + [
        ":src/version.cpp",
    ],
    hdrs = glob(
        ["include/pscm/**/*.h"],
    ),
    copts = select({
        # disable error: result of comparison of constant -1 with expression of type 'char' is always false
        "@platforms//cpu:wasm32": ["-Wno-tautological-constant-out-of-range-compare"],
        "//conditions:default": [],
    }) + [
        "-Wno-sign-compare",
        "-std=c++20",
        "-Wno-unused-value",
    ],
    defines = select({
        "@platforms//cpu:wasm32": ["WASM_PLATFORM"],
        "//conditions:default": [],
    }) + select({
        ":mlir_codegen": ["PSCM_ENABLE_MLIR_CODEGEN"],
        "//conditions:default": [],
    }),
    features = select({
        # only wasm need add exceptions explict
        "@platforms//cpu:wasm32": [
            "exceptions",
        ],
        "//conditions:default": [],
    }),
    includes = [
        "include",
    ],
    linkopts = select({
        "@platforms//cpu:wasm32": [
            "-sEXPORTED_RUNTIME_METHODS=ccall,cwrap",
            "-sSTACK_SIZE=6553600",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "@spdlog",
        "@cpp-linenoise",
        "@ust",
        "@icu",
        # "@icu//:io",
        # "@icu//:stubdata",
        "@mscharconv",
        # compat c++14
        # "@filesystem",
        # "@optional",
        # "@string-view-lite",
        # "@variant",
    ] + select({
        ":mlir_codegen": [
            ":pscm-ops-inc-gen",
            "@llvm-project//llvm:Core",
            "@llvm-project//llvm:OrcJIT",
            "@llvm-project//llvm:Support",
            "@llvm-project//mlir:AffineDialect",
            "@llvm-project//mlir:AffineToStandard",
            "@llvm-project//mlir:AffineTransforms",
            "@llvm-project//mlir:AllPassesAndDialects",
            "@llvm-project//mlir:Analysis",
            "@llvm-project//mlir:ArithDialect",
            "@llvm-project//mlir:ArithToLLVM",
            "@llvm-project//mlir:BuiltinToLLVMIRTranslation",
            "@llvm-project//mlir:CastInterfaces",
            "@llvm-project//mlir:ControlFlowToLLVM",
            "@llvm-project//mlir:ExecutionEngine",
            "@llvm-project//mlir:ExecutionEngineUtils",
            "@llvm-project//mlir:FuncDialect",
            "@llvm-project//mlir:FuncExtensions",
            "@llvm-project//mlir:FuncToLLVM",
            "@llvm-project//mlir:IR",
            "@llvm-project//mlir:LLVMCommonConversion",
            "@llvm-project//mlir:LLVMDialect",
            "@llvm-project//mlir:LLVMIRTransforms",
            "@llvm-project//mlir:LLVMToLLVMIRTranslation",
            "@llvm-project//mlir:MemRefDialect",
            "@llvm-project//mlir:MemRefToLLVM",
            "@llvm-project//mlir:Parser",
            "@llvm-project//mlir:Pass",
            "@llvm-project//mlir:SCFDialect",
            "@llvm-project//mlir:SCFToControlFlow",
            "@llvm-project//mlir:SideEffectInterfaces",
            "@llvm-project//mlir:Support",
            "@llvm-project//mlir:ToLLVMIRTranslation",
            "@llvm-project//mlir:TransformUtils",
            "@llvm-project//mlir:Transforms",

            # clang
            "@llvm-project//clang:driver",
            "@llvm-project//clang:frontend",
            "@llvm-project//clang:tooling",
        ],
        "//conditions:default": [],
    }),
)

cc_binary(
    name = "pscm-main",
    srcs = ["main.cpp"],
    copts = ["-std=c++20"],
    deps = [":pscm"],
)

collect_pscm_tests()

td_library(
    name = "pscm-ops-td-files",
    srcs = [
        "include/pscm/codegen/mlir/Ops.td",
    ],
    includes = ["include"],
    tags = ["manual"],
    deps = [
        "@llvm-project//mlir:CallInterfacesTdFiles",
        "@llvm-project//mlir:CastInterfacesTdFiles",
        "@llvm-project//mlir:FunctionInterfacesTdFiles",
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:SideEffectInterfacesTdFiles",
    ],
)

gentbl_cc_library(
    name = "pscm-ops-inc-gen",
    tags = ["manual"],
    tbl_outs = [
        (
            ["-gen-op-decls"],
            "Ops.h.inc",
        ),
        (
            ["-gen-op-defs"],
            "Ops.cpp.inc",
        ),
        (
            ["-gen-dialect-decls"],
            "Dialect.h.inc",
        ),
        (
            ["-gen-dialect-defs"],
            "Dialect.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/pscm/codegen/mlir/Ops.td",
    deps = [":pscm-ops-td-files"],
)

# when import pscm, the pscm.so must in root folder
# TODO: rename pypscm to pscm
pybind_extension(
    name = "pypscm",
    visibility = ["//visibility:public"],
    deps = ["//binding/python:pscm"],
)
