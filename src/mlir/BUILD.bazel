load("@llvm-project//mlir:tblgen.bzl", "gentbl_cc_library", "td_library")

licenses(["notice"])

package(default_visibility = ["//visibility:public"])

# td_library(
#     name = "ToyOpsTdFiles",
#     srcs = [
#         "include/toy/Ops.td",
#         "include/toy/ShapeInferenceInterface.td",
#     ],
#     includes = ["include"],
#     deps = [
#         "//mlir:CallInterfacesTdFiles",
#         "//mlir:CastInterfacesTdFiles",
#         "//mlir:FunctionInterfacesTdFiles",
#         "//mlir:OpBaseTdFiles",
#         "//mlir:SideEffectInterfacesTdFiles",
#     ],
# )

# gentbl_cc_library(
#     name = "ToyInterfacesIncGen",
#     tbl_outs = [
#         (
#             ["-gen-op-interface-decls"],
#             "include/toy/ShapeInferenceOpInterfaces.h.inc",
#         ),
#         (
#             ["-gen-op-interface-defs"],
#             "include/toy/ShapeInferenceOpInterfaces.cpp.inc",
#         ),
#     ],
#     tblgen = "//mlir:mlir-tblgen",
#     td_file = "include/toy/ShapeInferenceInterface.td",
#     deps = [":ToyOpsTdFiles"],
# )

# gentbl_cc_library(
#     name = "ToyOpsIncGen",
#     tbl_outs = [
#         (
#             ["-gen-op-decls"],
#             "include/toy/Ops.h.inc",
#         ),
#         (
#             ["-gen-op-defs"],
#             "include/toy/Ops.cpp.inc",
#         ),
#         (
#             ["-gen-dialect-decls"],
#             "include/toy/Dialect.h.inc",
#         ),
#         (
#             ["-gen-dialect-defs"],
#             "include/toy/Dialect.cpp.inc",
#         ),
#     ],
#     tblgen = "//mlir:mlir-tblgen",
#     td_file = "include/toy/Ops.td",
#     deps = [":ToyOpsTdFiles"],
# )

# gentbl_cc_library(
#     name = "ToyCombineIncGen",
#     strip_include_prefix = "mlir",
#     tbl_outs = [
#         (
#             ["-gen-rewriters"],
#             "mlir/ToyCombine.inc",
#         ),
#     ],
#     tblgen = "//mlir:mlir-tblgen",
#     td_file = "mlir/ToyCombine.td",
#     deps = [":ToyOpsTdFiles"],
# )

cc_binary(
    name = "toyc",
    # srcs = [
    #     "mlir/Dialect.cpp",
    #     "mlir/LowerToAffineLoops.cpp",
    #     "mlir/LowerToLLVM.cpp",
    #     "mlir/MLIRGen.cpp",
    #     "mlir/ShapeInferencePass.cpp",
    #     "mlir/ToyCombine.cpp",
    #     "parser/AST.cpp",
    #     "toyc.cpp",
    # ] + glob(["include/toy/*.h"]),
    includes = ["include/"],
    deps = [
        # ":ToyCombineIncGen",
        # ":ToyInterfacesIncGen",
        # ":ToyOpsIncGen",
        "@llvm-project//llvm:Core",
        "@llvm-project//llvm:OrcJIT",
        "@llvm-project//llvm:Support",
        "@llvm-project//mlir:AffineDialect",
        "@llvm-project//mlir:AffineToStandard",
        "@llvm-project//mlir:AffineTransforms",
        "@llvm-project//mlir:AllPassesAndDialects",
        "@llvm-project//mlir:Analysis",
        "@llvm-project//mlir:ArithDialect",
        "@llvm-project//mlir:ArithToLLVM",
        "@llvm-project//mlir:BuiltinToLLVMIRTranslation",
        "@llvm-project//mlir:CastInterfaces",
        "@llvm-project//mlir:ControlFlowToLLVM",
        "@llvm-project//mlir:ExecutionEngine",
        "@llvm-project//mlir:ExecutionEngineUtils",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:FuncExtensions",
        "@llvm-project//mlir:FuncToLLVM",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:LLVMCommonConversion",
        "@llvm-project//mlir:LLVMDialect",
        "@llvm-project//mlir:LLVMIRTransforms",
        "@llvm-project//mlir:LLVMToLLVMIRTranslation",
        "@llvm-project//mlir:MemRefDialect",
        "@llvm-project//mlir:MemRefToLLVM",
        "@llvm-project//mlir:Parser",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:SCFDialect",
        "@llvm-project//mlir:SCFToControlFlow",
        "@llvm-project//mlir:SideEffectInterfaces",
        "@llvm-project//mlir:Support",
        "@llvm-project//mlir:ToLLVMIRTranslation",
        "@llvm-project//mlir:TransformUtils",
        "@llvm-project//mlir:Transforms",
    ],
)